@use "../abstracts/variables" as vars;
@use "sass:string";

// Reusable mixins

// Font-face helper
@mixin font-face($family, $weight, $path) {
  @font-face {
    font-family: $family;
    font-style: normal;
    font-weight: $weight;
    src: url(#{$path}) format("truetype");
  }
}

// Pixel-perfect image rendering
@mixin pixel-image($url) {
  background: repeat url(#{$url});
  image-rendering: pixelated;
  image-rendering: -moz-crisp-edges;
  image-rendering: crisp-edges;
}

// Generate grey scale utilities
@mixin generate-color-utilities {
  @each $name, $hex in vars.$colors {
    // turn the map‚Äêkey into a real string
    $key-str: "#{$name}";


    .bg--#{$name},
    .bg-#{$name} {
      background-color: $hex !important;
    }

    .text--#{$name} {
      color: $hex !important;
    }

    @if string.index($key-str, 'gray') {
      $i: string.slice($name, 6);

      .bg--#{$name},
      .bg-#{$name} {
        @include pixel-image("/images/grayscale/#{$name}.png");
      }

      .text--#{$name} {
        @include pixel-image("/images/grayscale/#{$name}.png");
        color: rgba(0, 0, 0, 0);
        -webkit-background-clip: text;
        background-clip: text;
      }
    }
  }
}

// Generate border utilities
@mixin generate-border-utilities {
  @for $i from 1 through 7 {

    .border--h-#{$i},
    .b-h-gray-#{$i} {
      position: relative;

      &::before {
        content: " ";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 1px;
        @include pixel-image("/images/borders/#{$i}.png");
      }
    }

    .border--v-#{$i},
    .b-v-gray-#{$i} {
      position: relative;

      &::after {
        content: " ";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 1px;
        height: 100%;
        @include pixel-image("/images/borders/#{$i}.png");
      }
    }
  }
}